// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  images        String[]
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  phone               String?
  bioEn               String?
  bioFr               String?
  descriptionEn       String?
  descriptionFr       String?
  specialties         String[]
  certifications      String[]
  experience          Int?
  rating              Decimal?  @db.Decimal(3, 2)
  isActive            Boolean   @default(true)
  sessions            Session[]
  accounts            Account[]
  reviews             Review[]
  bookings            Booking[]
  lessonsAsInstructor Lesson[]  @relation("InstructorLessons")
  instructorReviews   Review[]  @relation("InstructorReviews")
  Lesson              Lesson[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum LessonLevel {
  Beginner
  Intermediate
  Advanced
}

enum LessonStatus {
  Draft
  Published
  Archived
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum CancellationReason {
  USER_CANCELLED
  INSTRUCTOR_CANCELLED
  LESSON_CANCELLED
  WEATHER
  EMERGENCY
  OTHER
}

model Category {
  id        String   @id @default(uuid())
  nameEn    String
  nameFr    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessons   Lesson[]
}

model Lesson {
  id                        String       @id @default(uuid())
  titleEn                   String
  titleFr                   String
  descriptionEn             String
  descriptionFr             String
  shortDescriptionEn        String
  shortDescriptionFr        String
  imageUrl                  String
  location                  String
  startTime                 DateTime
  endTime                   DateTime
  level                     LessonLevel  @default(Beginner)
  status                    LessonStatus @default(Draft)
  position                  Int
  maxCapacity               Int
  duration                  Int // Duration in minutes
  isRecurring               Boolean      @default(false)
  recurringPattern          String? // CRON-like pattern for recurring lessons
  cancellationDeadlineHours Int          @default(24)
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  instructor                User?        @relation("InstructorLessons", fields: [instructorId], references: [id])
  instructorId              String?
  Category                  Category?    @relation(fields: [categoryId], references: [id])
  categoryId                String?
  Review                    Review[]
  Booking                   Booking[]
  User                      User?        @relation(fields: [userId], references: [id])
  userId                    String?

  @@index([startTime])
  @@index([status])
  @@index([instructorId])
  @@index([categoryId])
}

model Booking {
  id                 String              @id @default(uuid())
  userId             String
  lessonId           String
  status             BookingStatus       @default(PENDING)
  bookedAt           DateTime            @default(now())
  confirmedAt        DateTime?
  cancelledAt        DateTime?
  cancellationReason CancellationReason?
  cancellationNote   String?
  attendanceMarked   Boolean             @default(false)
  attended           Boolean?
  position           Int? // Position in waiting list if lesson is full
  isWaitingList      Boolean             @default(false)
  notificationsSent  Json? // Track what notifications were sent
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId]) // Prevent duplicate bookings
  @@index([lessonId])
  @@index([userId])
  @@index([status])
  @@index([bookedAt])
}

model Review {
  id           String   @id @default(uuid())
  userId       String
  lessonId     String?
  instructorId String
  rating       Int      @db.SmallInt // 1-5 rating
  comment      String?
  isAnonymous  Boolean  @default(false)
  isApproved   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     Lesson? @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  instructor User    @relation("InstructorReviews", fields: [instructorId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId]) // One review per user per lesson
  @@index([instructorId])
  @@index([rating])
  @@index([isApproved])
}

model BookingSettings {
  id                       String   @id @default("settings")
  maxAdvanceBookingDays    Int      @default(30)
  defaultCancellationHours Int      @default(24)
  waitingListEnabled       Boolean  @default(true)
  autoConfirmBookings      Boolean  @default(false)
  sendReminderHours        Int      @default(2)
  maxBookingsPerUser       Int? // Optional limit per user
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String // BOOKING_CONFIRMED, LESSON_REMINDER, CANCELLATION, etc.
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      Json? // Additional data for the notification
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}
